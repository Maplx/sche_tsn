import gurobipy as gp
from gurobipy import GRB
import re

# Step 1: Parse the Input Data

# Flow description as a string (replace this with actual data or file reading as needed)
flow_description = '''
App ID,State ID,Flow ID,Links,Node Path,Period
0,0,0,7 -> 5,A -> D -> C,10
0,0,1,7 -> 5,A -> D -> C,10
0,0,2,0,A -> B,10
0,1,0,1,B -> A,10
0,1,1,7,A -> D,10
0,1,2,7 -> 5,A -> D -> C,10
1,0,0,2 -> 4 -> 6,B -> C -> D -> A,10
1,1,0,0 -> 2,A -> B -> C,10
1,1,1,3,C -> B,10
1,1,2,5 -> 3 -> 1,D -> C -> B -> A,10
1,2,0,5 -> 3,D -> C -> B,10
2,0,0,3 -> 1 -> 7,C -> B -> A -> D,10
2,0,1,2 -> 4,B -> C -> D,10
2,1,0,2,B -> C,10
3,0,0,1 -> 7,B -> A -> D,10
3,0,1,5 -> 3 -> 1,D -> C -> B -> A,10
3,0,2,6,D -> A,10
3,0,3,4 -> 6,C -> D -> A,10
3,1,0,6 -> 0,D -> A -> B,10
4,0,0,7 -> 5 -> 3,A -> D -> C -> B,10
4,1,0,2,B -> C,10
4,1,1,7 -> 5,A -> D -> C,10
4,1,2,5 -> 3 -> 1,D -> C -> B -> A,10
4,1,3,4 -> 6,C -> D -> A,10
5,0,0,4 -> 6,C -> D -> A,10
5,0,1,2,B -> C,10
5,0,2,0,A -> B,10
5,0,3,4 -> 6,C -> D -> A,10
5,1,0,4 -> 6 -> 0,C -> D -> A -> B,10
5,1,1,4,C -> D,10
5,1,2,3,C -> B,10
5,1,3,1 -> 7,B -> A -> D,10
6,0,0,5,D -> C,10
6,1,0,0 -> 2 -> 4,A -> B -> C -> D,10
6,1,1,3 -> 1 -> 7,C -> B -> A -> D,10
6,2,0,5 -> 3 -> 1,D -> C -> B -> A,10
6,2,1,0 -> 2,A -> B -> C,10
6,2,2,0,A -> B,10
6,2,3,1 -> 7 -> 5,B -> A -> D -> C,10
7,0,0,6 -> 0 -> 2,D -> A -> B -> C,10
7,0,1,4 -> 6,C -> D -> A,10
7,0,2,3 -> 1 -> 7,C -> B -> A -> D,10
7,1,0,0 -> 2,A -> B -> C,10
7,1,1,2 -> 4 -> 6,B -> C -> D -> A,10
7,1,2,4 -> 6 -> 0,C -> D -> A -> B,10
7,2,0,0 -> 2 -> 4,A -> B -> C -> D,10
8,0,0,7 -> 5,A -> D -> C,10
8,0,1,6,D -> A,10
8,0,2,2 -> 4 -> 6,B -> C -> D -> A,10
8,1,0,1 -> 7,B -> A -> D,10
8,1,1,5,D -> C,10
8,2,0,7,A -> D,10
9,0,0,5 -> 3 -> 1,D -> C -> B -> A,10
9,0,1,3 -> 1,C -> B -> A,10
9,1,0,4 -> 6,C -> D -> A,10
9,1,1,6,D -> A,10
9,1,2,6 -> 0 -> 2,D -> A -> B -> C,10
9,1,3,0 -> 2 -> 4,A -> B -> C -> D,10
9,2,0,1 -> 7 -> 5,B -> A -> D -> C,10
'''

# Schedule description as a string (replace this with actual data or file reading as needed)
schedule_description = '''
Time Slot,Link 0,Link 1,Link 2,Link 3,Link 4,Link 5,Link 6,Link 7
0,5,3,5,9,5,6,5,0
1,0,9,2,2,5,0,5,0
2,7,2,8,7,8,0,8,8
3,6,7,1,6,1,8,8,4
4,5,0,7,5,7,9,1,2
5,1,8,4,9,2,4,7,7
6,7,9,7,4,3,1,7,3
7,6,6,6,1,4,3,3,8
8,3,5,1,3,6,4,3,6
9,9,3,9,4,7,-1,4,9
'''

# Parse flow description
flows = []
applications = set()
links_set = set()
flow_lines = flow_description.strip().split('\n')[1:]  # Skip header
for line in flow_lines:
    parts = line.strip().split(',')
    app_id = int(parts[0])
    state_id = int(parts[1])
    flow_id = int(parts[2])
    links = list(map(int, re.findall(r'\d+', parts[3])))
    nodes = parts[4].split(' -> ')
    period = int(parts[5])
    flows.append({
        'app_id': app_id,
        'state_id': state_id,
        'flow_id': flow_id,
        'links': links,
        'nodes': nodes,
        'period': period
    })
    applications.add(app_id)
    links_set.update(links)

applications = sorted(applications)
links_list = sorted(links_set)

# Parse schedule description
schedule_lines = schedule_description.strip().split('\n')
schedule_header = schedule_lines[0].strip().split(',')
schedule_data = schedule_lines[1:]
num_timeslots = len(schedule_data)
num_links = len(schedule_header) - 1  # Exclude 'Time Slot' column

schedule = {}
for line in schedule_data:
    parts = line.strip().split(',')
    t = int(parts[0])
    for l in range(num_links):
        app = int(parts[l+1])
        if app != -1:
            schedule[(t, l)] = app

# Step 2: Define Variables

model = gp.Model('TSN_Schedule')

# Variables:
# flow_pcp_app_link[a][l] ∈ {0,..,7}
# <--- PCP value of app `a` on link `l`
flow_pcp_app_link = {}
for a in applications:
    for l in links_list:
        flow_pcp_app_link[a, l] = model.addVar(vtype=GRB.INTEGER, lb=0, ub=7, name=f'flow_pcp_app_link_{a}_{l}')

# pcp_queue[l][pcp] ∈ {0,..,7}, with one-one mapping per link l
# <--- Queue value of PCP `pcp` on link `l`
pcp_queue = {}
for l in links_list:
    for pcp in range(8):
        pcp_queue[l, pcp] = model.addVar(vtype=GRB.INTEGER, lb=0, ub=7, name=f'pcp_queue_{l}_{pcp}')

# slot_queue[l][t] ∈ {0,..,7}
# <--- Queue value of timeslot `t` on link `l`
slot_queue = {}
for l in range(num_links):
    for t in range(num_timeslots):
        slot_queue[l, t] = model.addVar(vtype=GRB.INTEGER, lb=0, ub=7, name=f'slot_queue_{l}_{t}')

model.update()

# Step 3: Set Up Constraints

# Constraint 1: For each link l, pcp_queue[l][pcp] are all different
for l in links_list:
    for pcp1 in range(8):
        for pcp2 in range(pcp1 + 1, 8):
            # Replace direct inequality with a greater-than-or-less-than relationship
            indicator = model.addVar(vtype=GRB.BINARY, name=f'indicator_{l}_{pcp1}_{pcp2}')
            model.addConstr(pcp_queue[l, pcp1] - pcp_queue[l, pcp2] >= 1 - 8 * indicator)
            model.addConstr(pcp_queue[l, pcp2] - pcp_queue[l, pcp1] >= 1 - 8 * (1 - indicator))

# Constraint 2: For each timeslot t, link l, application a scheduled at t,l:
# a <--- Application ID assigned to link l at timeslot t
# slot_queue[l, t] <--- Queue value of timeslot `t` on link `l` (TSN schedule)
# pcp_queue[l, flow_pcp_app_link[a, l]] <--- Queue value of PCP `flow_pcp_app_link[a, l]` on link `l` at timeslot `t` <--- information `t` is included in `a`

for t in range(num_timeslots):
    for l in range(num_links):
        key = (t, l)
        if key in schedule:
            a = schedule[key]
            if (a, l) in flow_pcp_app_link:
                model.addConstr(
                    slot_queue[l, t] == pcp_queue[l, flow_pcp_app_link[a, l]],
                    name=f'slot_queue_match_{t}_{l}'
                )
            else:
                # If the application doesn't use this link, we can assign any queue
                model.addConstr(
                    slot_queue[l, t] >= 0,
                    name=f'slot_queue_unused_{t}_{l}'
                )

# Additional Constraint: Ensure that flow_pcp_app_link variables are within bounds
for (a, l), var in flow_pcp_app_link.items():
    model.addConstr(var >= 0)
    model.addConstr(var <= 7)

# Objective: Since no specific optimization criterion is given, we'll just find any feasible solution
model.setObjective(0, GRB.MINIMIZE)

# Step 4: Solve the ILP Model

model.optimize()

# Step 5: Extract and Print the Matrices

if model.status == GRB.OPTIMAL:
    # Flow to PCP mapping for each flow
    print('Flow to PCP mapping (flow_pcp_app_link):')
    for a in applications:
        for l in links_list:
            if (a, l) in flow_pcp_app_link:
                pcp_value = int(flow_pcp_app_link[a, l].X)
                print(f'Application {a}, Link {l}: PCP {pcp_value}')

    # PCP to queue mapping for each link
    print('\nPCP to Queue mapping (pcp_queue):')
    for l in links_list:
        print(f'Link {l}:')
        for pcp in range(8):
            queue = int(pcp_queue[l, pcp].X)
            print(f'  PCP {pcp} -> Queue {queue}')

    # Timeslot to queue mapping for each link
    print('\nTimeslot to Queue mapping (slot_queue):')
    for l in range(num_links):
        print(f'Link {l}:')
        for t in range(num_timeslots):
            queue = int(slot_queue[l, t].X)
            print(f'  Timeslot {t}: Queue {queue}')
else:
    print('No feasible solution found.')